{

  open Lexing
  open Printf

  (* This function is analagous to [MenhirLib.LexerUtil.range] but does not
     print the file name or the trailing colon and newline. *)
  let range' (pos1, pos2) =
    let line = pos1.pos_lnum in
    let char1 = pos1.pos_cnum - pos1.pos_bol in
    let char2 = pos2.pos_cnum - pos1.pos_bol in (* yes, [pos1.pos_bol] *)
    sprintf "line %d, characters %d-%d"
      line char1 char2
      (* use [char1 + 1] and [char2 + 1] if *not* using Caml mode *)

}

rule error_message = parse error (main)
| / _* . expr _*
    { "Expecting an expression" }
| w = LPAREN; [expr / _* . RPAREN]
    { let w = $startloc(w), $endloc(w) in
      sprintf "Expecting a closing parenthesis (opened at %s)" (range' w) }
| w = [expr / _* . EOF]
    { let w = $startloc(w), $endloc(w) in
      sprintf "I have read a complete expression (%s)" (range' w) }
